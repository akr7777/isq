{"version":3,"file":"static/js/757.ea26b4e4.chunk.js","mappings":"kNACA,EAA+B,4BAA/B,EAA0E,4BAA1E,EAAqH,4BAArH,EAAkK,8B,SCSrJA,EAAuB,SAACC,GACjC,IAAMC,GAAwBC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,gBAAgBC,SAAS,IAE/F,OAAO,8BAECL,EAAMM,OAAQ,gBAAKC,UAAWC,EAAe,UACjC,iBAAKD,UAAWC,EAAe,UAC1BP,GACD,mBACIQ,QAAU,kBAAMT,EAAMU,SAAQ,EAAM,EACpCH,UAAWC,EAAe,SAC7B,aAO7B,EAEaG,EAAgB,SAACX,GAC1B,IAAMC,GAAwBC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,gBAAgBC,SAAS,IAI/F,OAHAO,YAAW,WACPZ,EAAMU,SAAQ,EAClB,GAAG,MACI,8BAECV,EAAMM,OAAQ,gBAAKC,UAAWC,EAAiB,SAC1CP,KAIjB,ECzCA,EAA8B,iCCyC9B,EAlCoB,YACFY,EAAAA,EAAAA,MAANC,GACSC,EAAAA,EAAAA,MACSb,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,gBAAgBC,SAAS,IAF3F,IAIA,GAAsCW,EAAAA,EAAAA,UAAiB,GAAE,eAAlDC,EAAW,KAAEC,EAAc,KAWlC,OAAO,iBAAKX,UAAWC,EAAc,UAIf,IAAhBS,IAAqB,SAAClB,EAAoB,CAACO,MAAM,EAAMI,QAAS,SAACS,GAAI,OAAKD,EAAe,EAAE,IAC3E,IAAhBD,IAAqB,SAACN,EAAa,CAACL,MAAM,EAAMI,QAAS,SAACS,GAAI,OAAKD,EAAe,EAAE,KAEtF,2BACI,wBAAI,sPACJ,wBAAI,+BAGR,mBAAQT,QArBa,WACrBS,EAAe,EAEnB,EAkBsC,SAAC,sEACnC,mBAAQT,QAlBa,WACrBS,EAAe,EAEnB,EAesC,SAAC,uEAG3C,C","sources":["webpack://questionare/./src/components/common/error-rise/error.module.css?1d11","components/common/error-rise/full-screen-error.tsx","webpack://questionare/./src/components/description/description.module.css?24b1","components/description/description.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error_layout\":\"error_error_layout__IUjKk\",\"alert_window\":\"error_alert_window__G660B\",\"alert_button\":\"error_alert_button__nhzNr\",\"alert_line_div\":\"error_alert_line_div__wLLWk\",\"alert_line_animation\":\"error_alert_line_animation__xfwOE\"};","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../store/store\";\nimport s from \"./error.module.css\";\n\n\ntype ErrorPropsType = {\n    show: boolean,\n    setShow: (bool: boolean) => void\n}\nexport const ErrorRisedFullScreen = (props: ErrorPropsType) => {\n    const connErrorText: string = useSelector((state: RootState) => state.connectionError.errorText);\n\n    return <>\n        {\n            props.show && <div className={s.error_layout}>\n                        <div className={s.alert_window}>\n                            {connErrorText}\n                            <button \n                                onClick={ () => props.setShow(false) }\n                                className={s.alert_button}\n                            >\n                                OK\n                            </button>\n                        </div>\n                    </div>\n        }\n   </>\n}\n\nexport const ErrorLineText = (props: ErrorPropsType) => {\n    const connErrorText: string = useSelector((state: RootState) => state.connectionError.errorText);\n    setTimeout(() => {\n        props.setShow(false);\n    }, 3000)\n    return <>\n        {\n            props.show && <div className={s.alert_line_div}>\n                {connErrorText}\n            </div>\n        }\n    </>\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"description_description__4N7d1\"};","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { changeErrorText } from \"../../store/features/connectionErrors\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { ErrorLineText, ErrorRisedFullScreen } from \"../common/error-rise/full-screen-error\";\nimport s from './description.module.css';\n\nconst Description = () => {\n    const { t } = useTranslation();  \n    const dispatch = useAppDispatch();\n    const connError: string = useSelector((state: RootState) => state.connectionError.errorText);\n\n    const [errorOption, setErrorOption] = useState<number>(0);\n\n    const btn1ClickHandler = () => {\n        setErrorOption(1);\n        // dispatch(changeErrorText(\"some error text!!!!\"))\n    }\n    const btn2ClickHandler = () => {\n        setErrorOption(2);\n        // dispatch(changeErrorText(\"some error text!!!!\"))\n    }\n\n    return <div className={s.description}>\n\n        {/* { t(\"main_page_text_1\")} */}\n        \n        { errorOption === 1 && <ErrorRisedFullScreen show={true} setShow={(bool) => setErrorOption(0) }/> }\n        { errorOption === 2 && <ErrorLineText show={true} setShow={(bool) => setErrorOption(0) }/> }\n\n        <ul>\n            <li>Ощибка при логинизации: обработать все ошибки</li>\n            <li>PUT /api/questionaries</li>\n        </ul>\n\n        <button onClick={btn1ClickHandler}>Ошибка вид № 1</button>\n        <button onClick={btn2ClickHandler}>Ошибка вид № 2</button>\n\n    </div>\n}\n\nexport default Description"],"names":["ErrorRisedFullScreen","props","connErrorText","useSelector","state","connectionError","errorText","show","className","s","onClick","setShow","ErrorLineText","setTimeout","useTranslation","t","useAppDispatch","useState","errorOption","setErrorOption","bool"],"sourceRoot":""}