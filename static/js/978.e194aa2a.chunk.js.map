{"version":3,"file":"static/js/978.e194aa2a.chunk.js","mappings":"0KACA,EAAyB,sBAAzB,EAA6D,2BAA7D,EAAsG,2B,6GCsGtG,EAtFc,WACV,IAAQA,GAAMC,EAAAA,EAAAA,MAAND,EACFE,GAAWC,EAAAA,EAAAA,KACbC,GAAWC,EAAAA,EAAAA,MAGTC,KADoBC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,KAAKC,MAAM,KAE7EC,EAAAA,EAAAA,YAAU,WACN,GAAIL,EACA,OAAOF,EAASQ,EAAAA,EAAAA,UAGxB,GAAE,CAACN,IAIH,IAAMO,GAAqBN,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,KAAKK,KAAKD,UAAU,IACjFE,GAAwBR,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,KAAKK,KAAKC,aAAa,IAEvFC,GAAoBT,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,KAAKK,KAAKE,UAAU,IAChFC,GAAwBV,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,KAAKK,KAAKI,UAAU,IACpFC,GAA2BZ,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,KAAKK,KAAKM,aAAa,IAEhG,GAAwCC,EAAAA,EAAAA,WAAkB,GAAM,eAAzDC,EAAY,KAAEC,EAAe,KAgBpC,OAAO,+BACH,iBAAKC,UAAWC,EAAS,WACrB,iBAAKD,UAAWC,EAAc,WAC1B,wBAAMzB,EAAE,kBACR,SAAC,IAAa,CACV0B,KAAK,OACLC,KAAMd,EACNe,YAAc5B,EAAE,2BAChB6B,iBAfM,SAACC,GACnB5B,GAAS6B,EAAAA,EAAAA,IAAeD,GAC5B,EAcgBE,MAAOhB,EAAWiB,OAAS,GAAKhB,EAChCiB,K,qsCACAC,WAAW,IAEblB,IAAiB,kBAAOO,UAAWC,EAAc,SAAEzB,EAAE,wBAG3D,iBAAKwB,UAAWC,EAAc,WAC1B,wBAAMzB,EAAE,qBACR,SAAC,IAAa,CACV0B,KAAMJ,EAAe,OAAS,WAC9BK,KAAMZ,EACNa,YAAc5B,EAAE,8BAChB6B,iBA1BS,SAACC,GACtB5B,GAASkC,EAAAA,EAAAA,IAAkBN,GAC/B,EAyBgBE,MAAOhB,EAAWiB,OAAS,GAAKd,EAChCe,KACInB,EAAckB,OAAS,EACjBX,E,+xKAKVe,oBAAqB,kBAAMd,GAAiBD,EAAa,IAE3DH,IAAoB,kBAAOK,UAAWC,EAAc,SAAEzB,EAAE,uBAI5DgB,EAAWiB,OAAS,IAAK,kBAAOT,UAAWC,EAAc,SAAET,KAE7D,SAAC,IAAQ,CACLW,KAAO3B,EAAE,gBACTsC,gBAAiB,kBAvDD,WACxB,IAAMC,EAAkC,CACpCC,SAAU3B,EACV4B,SAAU1B,GAEdb,GAASwC,EAAAA,EAAAA,IAAWH,GACxB,CAiDmCI,EAAqB,QAI5D,C","sources":["webpack://questionare/./src/components/login/login.module.css?e6ba","components/login/login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fields\":\"login_fields__eO21b\",\"error_label\":\"login_error_label__9NT7P\",\"inputs_divs\":\"login_inputs_divs__FrAxO\"};","import s from \"./login.module.css\";\nimport { ButtonOK } from '../common/buttons/buttons';\nimport { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { onLoginInputAC, onPasswordInputAC, UserIdType } from \"../../store/features/authSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { LineTextField } from \"../common/labelTextField/labelLineText\";\n\nimport iconUserName from \"../../public/icons/icon_username.png\";\nimport iconPassword from \"../../public/icons/icon_password.png\";\nimport iconEyeOpened from \"../../public/icons/icon_eye_opened.png\";\nimport iconEyeClosed from \"../../public/icons/icon_eye_closed.png\";\nimport { PATHS } from \"../outlet/outlet\";\nimport { loginThunk, loginThunkPropsType } from \"../../store/features/authThunks\";\n\nconst Login = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n    let navigate = useNavigate();\n\n    const userId:UserIdType = useSelector((state: RootState) => state.auth.userId);\n    const isAuth:boolean = userId ? true : false;\n    useEffect(() => {\n        if (isAuth){\n            return navigate(PATHS.dashboard);\n        }\n        \n    },[isAuth]);\n\n\n    //console.log('Login / Error=', error);\n    const loginInput: string = useSelector((state: RootState) => state.auth.vars.loginInput);\n    const passwordInput: string = useSelector((state: RootState) => state.auth.vars.passwordInput);\n    \n    const loginError:string = useSelector((state: RootState) => state.auth.vars.loginError);\n    const loginRequired:boolean = useSelector((state: RootState) => state.auth.vars.emptyLogin);\n    const passwordRequired:boolean = useSelector((state: RootState) => state.auth.vars.emptyPassword);\n    \n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    const onLoginClickHandler = () => {\n        const credentials:loginThunkPropsType = {\n            username: loginInput,\n            password: passwordInput\n        }\n        dispatch(loginThunk(credentials));\n    }\n    const onLoginChange = (newValue: string) => {\n        dispatch(onLoginInputAC(newValue));\n    }\n    const onPasswordChange = (newValue: string) => {\n        dispatch(onPasswordInputAC(newValue));\n    }\n\n    return <>\n        <div className={s.fields}>\n            <div className={s.inputs_divs}>\n                <h2>{ t(\"login_login\") }</h2>\n                <LineTextField \n                    type=\"text\"\n                    text={loginInput}\n                    placeholder={ t(\"login_login_placeholder\") }\n                    onChangeFunction={onLoginChange}\n                    error={loginError.length > 0 || loginRequired}\n                    icon={iconUserName}\n                    autofocus={true}\n                />\n                { loginRequired && <label className={s.error_label}>{t(\"required_field\")}</label>}\n                {/* <input type={'text'} placeholder=\"\"/> */}\n            </div>\n            <div className={s.inputs_divs}>\n                <h2>{ t(\"login_password\") }</h2>\n                <LineTextField \n                    type={showPassword ? \"text\" : \"password\"}\n                    text={passwordInput}\n                    placeholder={ t(\"login_password_placeholder\") }\n                    onChangeFunction={onPasswordChange}\n                    error={loginError.length > 0 || passwordRequired}\n                    icon={\n                        passwordInput.length > 0 \n                            ? showPassword\n                                ? iconEyeClosed\n                                : iconEyeOpened\n                            : iconPassword\n                    }\n                    onIconClickFunction={() => setShowPassword(!showPassword)}\n                />\n                { passwordRequired && <label className={s.error_label}>{t(\"required_field\")}</label>}\n                {/* <input type={'password'} placeholder=\"\"/> */}\n            </div>\n\n            { loginError.length > 0 && <label className={s.error_label}>{loginError}</label>}\n\n            <ButtonOK \n                text={ t(\"login_button\") }\n                onClickFunction={() => onLoginClickHandler()}\n            />\n        </div>\n    </>\n}\n\nexport default Login;"],"names":["t","useTranslation","dispatch","useAppDispatch","navigate","useNavigate","isAuth","useSelector","state","auth","userId","useEffect","PATHS","loginInput","vars","passwordInput","loginError","loginRequired","emptyLogin","passwordRequired","emptyPassword","useState","showPassword","setShowPassword","className","s","type","text","placeholder","onChangeFunction","newValue","onLoginInputAC","error","length","icon","autofocus","onPasswordInputAC","onIconClickFunction","onClickFunction","credentials","username","password","loginThunk","onLoginClickHandler"],"sourceRoot":""}