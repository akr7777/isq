{"version":3,"file":"static/js/463.558ad818.chunk.js","mappings":"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","sources":["webpack://questionare/./src/components/profile/profile.module.css?5210","webpack://questionare/./src/components/common/radioLabels/radioLabel.module.css?5aa4","components/common/radioLabels/radioLabels.tsx","components/profile/interfaceTableView.tsx","components/profile/interfaceRiskView.tsx","components/profile/interfaceDataFormat.tsx","components/profile/interfacePageSizing.tsx","components/profile/profileHeadName.tsx","components/profile/profileHead.tsx","components/profile/profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileWrappedDiv\":\"profile_profileWrappedDiv__PVzle\",\"avaImg\":\"profile_avaImg__LlZre\",\"profile_head\":\"profile_profile_head__48EDv\",\"line_div\":\"profile_line_div__EbwTk\",\"user_interface_settings\":\"profile_user_interface_settings__qx1KJ\",\"user_interface_settings_one_block\":\"profile_user_interface_settings_one_block__eyX6L\",\"user_interface_settings_one_block_loading\":\"profile_user_interface_settings_one_block_loading__HErGi\",\"small_icons\":\"profile_small_icons__Ol70F\"};","// extracted by mini-css-extract-plugin\nexport default {\"input_div\":\"radioLabel_input_div__Le6S9\",\"ligend_input\":\"radioLabel_ligend_input__j-xRX\",\"ligend_input_checked\":\"radioLabel_ligend_input_checked__PunMU\",\"ligend_label\":\"radioLabel_ligend_label__jNcJi\",\"ligend_label_checked\":\"radioLabel_ligend_label_checked__zSnRs\"};","import s from './radioLabel.module.css';\nimport { MouseEvent } from 'react';\n\nexport type RadioLabelOptionType = {\n    text: string,\n    value: string\n}\n\nexport type RadioLabelsPropsType = {\n    options: Array<RadioLabelOptionType>,\n    defaultOption: string,\n    className?: string,\n    onClickFunction: (value: string) => void,\n\n}\nexport const RadioLabels = (props: RadioLabelsPropsType) => {\n\n    const onRadioInputClickHandler = (e: MouseEvent<HTMLInputElement>) => {\n        const value = e.currentTarget.value;\n        if ( props.options.some( el => el.value === value ) ) {\n            props.onClickFunction(value);\n        }\n    }\n\n    return <>\n        {\n            props.options.map( (o:RadioLabelOptionType, elemIndex: number) => {\n                return <div className={s.input_div} key={o.value + \"_\" + String(elemIndex)}>\n\n                <input type=\"radio\" id={o.value + \"_\" + String(elemIndex)} name={o.value + \"_\" + String(elemIndex)} \n                    className={ o.value === props.defaultOption\n                            ? s.ligend_input + \" \" + s.ligend_input_checked\n                            : s.ligend_input\n                    }\n                    value={o.value}\n                    onClick={(e) => onRadioInputClickHandler(e)}\n                />\n                \n                <label \n                    htmlFor={o.value + \"_\" + String(elemIndex)}\n                    className={ o.value === props.defaultOption \n                                    ? s.ligend_label + \" \" + s.ligend_label_checked\n                                    : s.ligend_label\n                            }\n                >\n                    { o.text }\n                </label>\n\n            </div>\n            })\n        }\n    </>\n}","import { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { t } from \"i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { BRICK_VIEW, ProfileUserSettingsType, TABLE_VIEW, LayoutOptionsType, changeLoadingStatus } from \"../../store/features/authSlice\";\nimport { ProfileRequestType, updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst Checker = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const currentLayout:LayoutOptionsType = useSelector((state:RootState) => state.auth.userSettings.layout);\n    // const currentView:ViewOptionsType = useSelector((state:RootState) => state.supplier.settings.view);\n    const dispatch = useAppDispatch();\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.layoutLoadingStatus);\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        if (newValue===TABLE_VIEW || newValue===BRICK_VIEW) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     layout: newValue,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"layoutLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({layout: newValue}));\n            // dispatch(changeViewAC(newValue))\n        }\n    }\n\n    const options:Array<RadioLabelOptionType> = [\n        {\n            text: t(\"profile_view_table\"),\n            value: TABLE_VIEW,\n        },\n        {\n            text: t(\"profile_view_brick\"),\n            value: BRICK_VIEW,\n        }\n    ]\n\n    return <>\n    {\n        isLoading\n            ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                <Preloader />\n            </div>\n            : <div className={s.user_interface_settings_one_block}>\n                <h3>{ t(\"profile_view_legend\") }</h3>\n                <RadioLabels \n                    options={options}\n                    defaultOption={currentLayout}\n                    onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                />\n            </div>\n    }\n    </>\n    \n}\n\nexport default Checker;\n","import { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { changeLoadingStatus, RiskViewSTAR, RiskViewType, RiskViewWORD } from \"../../store/features/authSlice\";\nimport { updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst ProfileRiskViewChecker = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const riskView:RiskViewType = useSelector((state:RootState) => state.auth.userSettings.risk_format);\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.riskFormatLoadingStatus);\n    \n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        if (newValue === RiskViewSTAR || newValue === RiskViewWORD) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     risk_format: newValue,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"riskFormatLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({risk_format: newValue}));\n        }\n    }\n\n    const options:Array<RadioLabelOptionType> = [\n        {\n            text: t(\"profile_risk_view_word\"),\n            value: RiskViewWORD,\n        },\n        {\n            text: t(\"profile_risk_view_star\"),\n            value: RiskViewSTAR,\n        }\n    ]\n    \n    return <>\n        {\n            isLoading\n                ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                    <Preloader />\n                </div>\n                : <div className={s.user_interface_settings_one_block}>\n                    <h3>{ t(\"profile_risk_view_title\") }</h3>\n                    <RadioLabels \n                        options={options}\n                        defaultOption={riskView}\n                        onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                    />\n                </div>\n        }\n    </>\n}\n\nexport default ProfileRiskViewChecker;","import { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { changeLoadingStatus, DATE_EU, DATE_US, FormatDateType, ProfileUserSettingsType } from \"../../store/features/authSlice\";\nimport { ProfileRequestType, updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst InterfaceDateFormat = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n    // const userName:string = useSelector((state: RootState) => state.auth.username);\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const dateFormat:FormatDateType = useSelector((state:RootState) => state.auth.userSettings.date_format);\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.dateFormatLoadingStatus);\n\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        if (newValue === DATE_EU || newValue === DATE_US) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     date_format: newValue,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"dateFormatLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({date_format: newValue,}));\n        }\n    }\n\n    const options:Array<RadioLabelOptionType> = [\n        {\n            text: t(\"profile_date_format_EU\"),\n            value: DATE_EU,\n        },\n        {\n            text: t(\"profile_date_format_US\"),\n            value: DATE_US,\n        }\n    ]\n    \n    return <>\n        {\n            isLoading\n                ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                    <Preloader />\n                </div>\n                : <div className={s.user_interface_settings_one_block}>\n                    <h3>{ t(\"profile_date_format_title\") }</h3>\n                    <RadioLabels \n                        options={options}\n                        defaultOption={dateFormat}\n                        onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                    />\n                </div>\n        }\n    </>\n}\n\nexport default InterfaceDateFormat;","import { useSelector } from \"react-redux\";\n// import { changePageSizingAC, changeRiskInLineAC, pageSizeOptions, RiskViewSTAR, RiskViewType, RiskViewWORD } from \"../../store/features/supplierSlice\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { changeLoadingStatus, pageSizeOptions, ProfileUserSettingsType } from \"../../store/features/authSlice\";\nimport { ProfileRequestType, updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst InterfacePageSizing = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n    // const userName:string = useSelector((state: RootState) => state.auth.username);\n\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const currentPageSize:number = useSelector((state:RootState) => state.auth.userSettings.items_per_page);\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.itemsPerPageLoadingStatus);\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        const intVal = Number(newValue);\n        if (pageSizeOptions.some( s => s === intVal)) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     items_per_page: intVal,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"itemsPerPageLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({items_per_page: intVal}));\n          }\n    }\n\n    const options:Array<RadioLabelOptionType> = pageSizeOptions.map( s => {\n        return {\n            text: String(s),\n            value: String(s)\n        }\n    })\n    \n    return <>\n        {\n            isLoading\n                ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                    <Preloader />\n                </div>\n                : <div className={s.user_interface_settings_one_block}>\n                    <h3>{ t(\"profile_page_size_title\") }</h3>\n                    <RadioLabels \n                        options={options}\n                        defaultOption={String(currentPageSize)}\n                        onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                    />\n                </div>\n        }\n    </>\n}\n\nexport default InterfacePageSizing;","import { useTranslation } from 'react-i18next';\nimport s from './profile.module.css';\nimport iconUpdate from \"../../public/icons/icon_update.png\";\nimport iconDone from \"../../public/icons/icon_done.png\";\nimport iconCross from \"../../public/icons/icon_cross.png\";\nimport { useState } from 'react';\nimport { LineTextField } from '../common/labelTextField/labelLineText';\nimport { useSelector } from 'react-redux';\nimport { RootState, useAppDispatch } from '../../store/store';\nimport { changeLoadingStatus, ProfileUserSettingsType } from '../../store/features/authSlice';\nimport { updateProfileThunk } from '../../store/features/authThunks';\nimport Preloader from '../common/preloader/preloader';\n\nconst ProfileHeadFieldName = () => {\n    const {t} = useTranslation();\n\n    const myName: string = useSelector((state: RootState) => state.auth.name);\n    // const newName: string = useSelector((state: RootState) => state.auth.vars.newNameInput);\n    const [newName, setNewName] = useState<string>(myName);\n    const [isChange, setIsChange] = useState<boolean>(false);\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    // const username: string = useSelector((state:RootState) => state.auth.username);\n    const dispatch = useAppDispatch();\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.nameChangeLoadingStatus);\n\n    const onDoneIconClickHandler = () => {\n        setIsChange(false);\n        dispatch(changeLoadingStatus({field: \"nameChangeLoadingStatus\", newValue: true}))\n        dispatch(updateProfileThunk({name: newName}));\n    }\n    const crossIconClickHandler = () => {\n        setIsChange(false);\n        setNewName(myName);\n    }\n\n    return <div className={s.line_div}>\n\n        <label>{t(\"profile_name\")}:</label>\n\n        {\n            !isChange\n                ? isLoading ? <Preloader /> : <h2>{myName}</h2>\n                : <LineTextField \n                    type='text'\n                    text={newName}\n                    onChangeFunction={(newValue: string) => setNewName(newValue)}\n                />\n        }\n        {\n            !isChange\n                ? <img src={iconUpdate} className={s.small_icons} onClick={() => setIsChange(true)}/>\n                : <>\n                    <img src={iconDone} className={s.small_icons} onClick={onDoneIconClickHandler}/>\n                    <img src={iconCross} className={s.small_icons} onClick={crossIconClickHandler}/>\n                </>\n        }\n\n    </div>\n}\n\nexport default ProfileHeadFieldName;","import { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport ava from \"./../../public/images/ava.jpg\";\nimport s from './profile.module.css';\nimport ProfileHeadFieldName from \"./profileHeadName\";\n\nconst ProfileHead = () => {\n    const {t} = useTranslation();\n    const myUsername: string = useSelector((state: RootState) => state.auth.username);\n\n    return <div className={s.profile_head}>\n        <img src={ava} className={s.avaImg} alt=\"Заменить аватар\" />\n        Будем-ли давать возможность менять аватар?\n\n        <ProfileHeadFieldName />\n\n        <div className={s.line_div}>\n            <label>{t(\"profile_username\")}:</label>\n            <h2>{myUsername}</h2>\n        </div>\n\n        {/* \n            <ProfileHeadField \n                text={ t(\"profile_role\") }\n                value={profileRole}\n                onChangeFunction={(newValue: string) => onProfileRoleChangeHandler(newValue)}\n            />\n        */}\n    </div>\n}\n\nexport default ProfileHead;","import s from \"./profile.module.css\";\nimport TableBrickChecker from \"./interfaceTableView\";\nimport { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport ProfileRiskViewChecker from \"./interfaceRiskView\";\nimport InterfaceDateFormat from \"./interfaceDataFormat\";\nimport InterfacePageSizing from \"./interfacePageSizing\";\nimport { useEffect } from \"react\";\nimport { getProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\nimport ProfileHead from \"./profileHead\";\n\n\nconst Profile = () => {\n    // const userRole:RoleType = useSelector((state: RootState) => state.auth.role);\n    const { t } = useTranslation();\n    // const navigate = useNavigate();\n    const dispatch = useAppDispatch();\n\n    useEffect( () => {\n        dispatch(getProfileThunk());\n    }, []);\n\n    const isLoading:boolean = useSelector((state:RootState) => state.auth.loadingStatus.profileRequestLoadingStatus);\n\n    return <>\n        {\n            isLoading\n                ? <div className={s.profileWrappedDiv}>\n                    <Preloader />\n                </div>\n                : <div className={s.profileWrappedDiv}>\n\n                    <ProfileHead />    \n        \n                    <h2>{ t(\"profile_user_interface_settings\") }</h2>\n                    <div className={s.user_interface_settings}>\n                        <TableBrickChecker />\n                        <ProfileRiskViewChecker />\n                        <InterfaceDateFormat />\n                        <InterfacePageSizing />\n                        <div className={s.user_interface_settings_one_block}>\n                            Надо бы придумать сожержание этого блока\n                        </div>\n                        <div className={s.user_interface_settings_one_block}>\n                            Надо бы придумать сожержание этого блока\n                        </div>\n                    </div>\n                    \n            </div>\n        }\n    </>\n}\n\nexport default Profile;"],"names":["RadioLabels","props","options","map","o","elemIndex","className","s","type","id","value","String","name","defaultOption","onClick","e","currentTarget","some","el","onClickFunction","onRadioInputClickHandler","htmlFor","text","currentLayout","useSelector","state","auth","userSettings","layout","dispatch","useAppDispatch","isLoading","loadingStatus","layoutLoadingStatus","t","TABLE_VIEW","BRICK_VIEW","newValue","changeLoadingStatus","field","updateProfileThunk","onViewChangeClickHandler","riskView","risk_format","riskFormatLoadingStatus","useTranslation","RiskViewWORD","RiskViewSTAR","dateFormat","date_format","dateFormatLoadingStatus","DATE_EU","DATE_US","currentPageSize","items_per_page","itemsPerPageLoadingStatus","pageSizeOptions","intVal","Number","myName","useState","newName","setNewName","isChange","setIsChange","nameChangeLoadingStatus","onChangeFunction","src","myUsername","username","ava","alt","useEffect","getProfileThunk","profileRequestLoadingStatus"],"sourceRoot":""}