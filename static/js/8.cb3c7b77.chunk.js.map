{"version":3,"file":"static/js/8.cb3c7b77.chunk.js","mappings":"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","sources":["webpack://questionare/./src/components/newSupplier/newSupplier.module.css?89a1","components/newSupplier/newSupplierButtons.tsx","components/newSupplier/newSupplierLinkCreated.tsx","components/newSupplier/newSupplier.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"newWrapper\":\"newSupplier_newWrapper__PDdSD\",\"fields\":\"newSupplier_fields__el0CS\",\"fields_width\":\"newSupplier_fields_width__5iJqt\",\"oneField\":\"newSupplier_oneField__BBozZ\",\"labelText\":\"newSupplier_labelText__1OICM\",\"buttonsDiv\":\"newSupplier_buttonsDiv__bNH-C\",\"btn_width\":\"newSupplier_btn_width__UJ4ha\",\"newSupplier_link_div\":\"newSupplier_newSupplier_link_div__CGsDC\",\"newSupplier_link_link\":\"newSupplier_newSupplier_link_link__zatX7\",\"newSupplier_link_link_width1\":\"newSupplier_newSupplier_link_link_width1__rmLo9\",\"error\":\"newSupplier_error__UwALU\",\"copy_icon\":\"newSupplier_copy_icon__kDYA+\",\"newSupplierButtons\":\"newSupplier_newSupplierButtons__9UtRq\"};","import { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { newSupplierChangeInfoAC, newSupplierInitData } from \"../../store/features/newSupplierSlice\";\nimport { useAppDispatch } from \"../../store/store\";\nimport { ButtonCancel, ButtonOK } from \"../common/buttons/buttons\";\nimport { PATHS } from \"../outlet/outlet\";\nimport s from \"./newSupplier.module.css\";\n\ntype NewSupplierFirstButtonsPropsType = { onClick: () => void }\n\nexport const NewSupplierFirstButtons = (props: NewSupplierFirstButtonsPropsType) => {\n    const {t} = useTranslation();\n\n    return <div className={s.buttonsDiv + \" \" + s.btn_width}>\n        <ButtonOK \n            text={ t(\"newSupplier_create_new\") }\n            onClickFunction={props.onClick}\n        />\n        <ButtonCancel \n            text={ t(\"newSupplier_cancel_new\") }\n            onClickFunction={props.onClick}\n        />\n    </div>\n}\n\nexport const NewSupplierSecondButtons = () => {\n\n    const navigate = useNavigate();\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const onNewCompanyClickHandler = () => {\n        dispatch(newSupplierChangeInfoAC(newSupplierInitData))\n    }\n    const mainPageClickHandler = () => {\n        dispatch(newSupplierChangeInfoAC(newSupplierInitData))\n        navigate(PATHS.dashboard)\n    }\n\n\n    return <div className={s.newSupplierButtons}>\n        <ButtonOK\n            text={ t(\"newSupplier_goToMainPage\")}\n            onClickFunction={mainPageClickHandler}\n        />\n        <ButtonOK \n            text={ t(\"newCompany\") }\n            onClickFunction={onNewCompanyClickHandler}\n        />\n    </div>\n}\n","import { useState } from \"react\";\nimport { LineTextField } from \"../common/labelTextField/labelLineText\";\nimport s from \"./newSupplier.module.css\";\nimport iconCopyGreen from '../../public/icons/icon_copy_green.png';\nimport iconCopyBlue from '../../public/icons/icon_copy_blue.png';\n\ntype NewSuplierLinkCreatedPropsType = { newSupplierLink: string }\n\nconst NewSuplierLinkCreated = (props: NewSuplierLinkCreatedPropsType) => {\n\n    const [copyLinkSuccess, setCopyLinkSuccess] = useState<boolean>(false);\n\n    const delay = (seconds: number) => new Promise(resolve => setTimeout(resolve,seconds*1000)) \n\n    const copyToBuffer = async () => {\n        navigator.clipboard.writeText(props.newSupplierLink)\n        .then(async () => {\n            setCopyLinkSuccess(true);\n            await delay(3);\n            setCopyLinkSuccess(false);\n        })\n        .catch(err => {\n            console.log('Something went wrong', err);\n        });\n    }\n\n    return <div className={s.newSupplier_link_link}>\n        <LineTextField\n            type='text'\n            text={ props.newSupplierLink }\n            onChangeFunction={() => {}}\n            className={s.newSupplier_link_link_width1}\n        />\n        {\n            copyLinkSuccess \n                ? <img src={iconCopyGreen} className={s.copy_icon}/>\n                : <img src={iconCopyBlue} className={s.copy_icon} onClick={() => copyToBuffer()}/>\n        }\n    </div>\n}\n\nexport default NewSuplierLinkCreated;","import { useState } from 'react';\nimport { LineTextField } from '../common/labelTextField/labelLineText';\nimport s from './newSupplier.module.css';\nimport { useTranslation } from 'react-i18next';\nimport iconTicket from \"../../public/icons/purchase_ticket.png\";\nimport iconCompany from \"../../public/icons/icon_company.png\";\nimport { RootState, useAppDispatch } from '../../store/store';\nimport { useSelector } from 'react-redux';\nimport { createNewSupplierThunk, newSupplierChangeInfoAC, NewSupplierType } from '../../store/features/newSupplierSlice';\nimport Preloader from '../common/preloader/preloader';\nimport { NewSupplierSecondButtons, NewSupplierFirstButtons } from './newSupplierButtons';\nimport NewSuplierLinkCreated from './newSupplierLinkCreated';\n\n\nconst NewSupplier = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const company: string = useSelector((state: RootState) => state.newSupplier.company)\n    const ticket: string = useSelector((state: RootState) => state.newSupplier.ticket)\n    const newSupplierLink: string = useSelector((state:RootState) => state.newSupplier.link);\n    const isLoading: boolean = useSelector((state:RootState) => state.newSupplier.isLoading);\n    const [error, setError] = useState<string>('');\n\n    // const createdSupplierName:string = useSelector((state:RootState) => state.newSupplier.company);\n    // const createdSupplierTicket: string | null = useSelector((state:RootState) => state.newSupplier.ticket);\n\n    const onNewSupplierNameChangeHandler = (newText: string) => {\n        dispatch(newSupplierChangeInfoAC( {company: newText} ));\n        setError('');\n    }\n    const onSupplierTicketChangeHandler = (newText: string) => {\n        dispatch(newSupplierChangeInfoAC( {ticket: newText} ));\n        setError('');\n    }\n\n    const onNewSupplierCreateClickHandler = () => {\n        if (company.length > 0) {\n            dispatch(createNewSupplierThunk({company: company, ticket: ticket}));\n        } else {\n            const errorMessage:string = t(\"required_field\");\n            setError(errorMessage);\n        }\n    }\n\n    return <div className={s.newWrapper}>\n        <div>\n            <h1>{ t(\"newSupplier_title\") }</h1>\n        </div>\n\n        {\n            newSupplierLink.length === 0 && <>\n            \n                    <div className={s.fields}>\n                        <div className={s.oneField + \" \" + s.fields_width}>\n                            <label>{ t(\"newSupplier_name\") }</label>\n\n                            <LineTextField \n                                type='text'\n                                text={company}\n                                placeholder={ t(\"newSupplier_name_placeholder\") }\n                                error={error.length > 0}\n                                onChangeFunction={ (newText:string) => onNewSupplierNameChangeHandler(newText) }\n                                className={s.labelText + \" \" + s.company_label_width}\n                                autofocus={true}\n                                icon={iconCompany}\n                            />\n\n                            {\n                                error.length > 0 && <div className={s.error}>{ t(\"required_field\") }</div>\n                            }\n                        </div>\n\n                        <div className={s.oneField + \" \" + s.fields_width}>\n                            <label>{ t(\"newSupplier_ticketLink\") }</label>\n\n                            <LineTextField \n                                type='text'\n                                text={ticket}\n                                placeholder={ t(\"newSupplier_ticketLink_placeholder\") }\n                                onChangeFunction={ (newText:string) => onSupplierTicketChangeHandler(newText) }\n                                className={s.labelText}\n                                icon={iconTicket}\n                            />\n                        </div>\n\n                    </div>\n\n                    <NewSupplierFirstButtons onClick={onNewSupplierCreateClickHandler} />\n\n                </>\n        }\n\n        {\n            isLoading \n                ? <Preloader />\n                : <>\n                    {\n                        newSupplierLink.length > 0 && <div className={s.newSupplier_link_div}>\n                            <h3>{ t(\"newSupplier_link_send_it_1\") }</h3>\n\n                            <h3>\n                                { t(\"newSupplier_company_name\") } \n                                { company }\n                            </h3>\n                            {\n                                ticket && <h3>\n                                    { t(\"newSupplier_ticket\") }\n                                    { ticket }\n                                </h3>\n                            }\n                            \n\n                            <h3>{ t(\"newSupplier_link_send_it_2\") }</h3>\n\n\n                            <NewSuplierLinkCreated newSupplierLink={newSupplierLink}/>\n\n                            <NewSupplierSecondButtons />\n                        </div>\n                    }\n                </>\n            \n        }\n        \n    </div>\n}\n\nexport default NewSupplier;"],"names":["NewSupplierFirstButtons","props","t","useTranslation","className","s","text","onClickFunction","onClick","NewSupplierSecondButtons","navigate","useNavigate","dispatch","useAppDispatch","newSupplierChangeInfoAC","newSupplierInitData","PATHS","useState","copyLinkSuccess","setCopyLinkSuccess","delay","seconds","Promise","resolve","setTimeout","copyToBuffer","navigator","clipboard","writeText","newSupplierLink","then","catch","err","console","log","type","onChangeFunction","src","company","useSelector","state","newSupplier","ticket","link","isLoading","error","setError","length","placeholder","newText","onNewSupplierNameChangeHandler","autofocus","icon","onSupplierTicketChangeHandler","iconTicket","createNewSupplierThunk","errorMessage"],"sourceRoot":""}