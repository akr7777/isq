{"version":3,"file":"static/js/463.82bfaf70.chunk.js","mappings":"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","sources":["webpack://questionare/./src/components/common/labelTextField/labelLineText.module.css?43aa","components/common/labelTextField/labelLineText.tsx","webpack://questionare/./src/components/profile/profile.module.css?5210","webpack://questionare/./src/components/common/radioLabels/radioLabel.module.css?5aa4","components/common/radioLabels/radioLabels.tsx","components/profile/interfaceTableView.tsx","components/profile/interfaceRiskView.tsx","components/profile/interfaceDataFormat.tsx","components/profile/interfacePageSizing.tsx","components/profile/profileHeadName.tsx","components/profile/profileHead.tsx","components/profile/profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"lineTextDiv\":\"labelLineText_lineTextDiv__VTp64\",\"lineTextDecoration\":\"labelLineText_lineTextDecoration__vf3qZ\",\"error\":\"labelLineText_error__kyQCn\",\"icon\":\"labelLineText_icon__Cq+yk\"};","import { ChangeEvent } from \"react\";\nimport s from \"./labelLineText.module.css\";\n\ntype LineTextFieldPropsType = {\n    type: 'text' | 'password' | 'date',\n    text: string,\n    placeholder?: string | null,\n    error?: boolean,\n    onChangeFunction: (text: string) => void,\n    className?: string,\n    icon?: any,\n    onIconClickFunction?: () => void,\n    autofocus?: boolean\n    onClickFunction?: ()=> void,\n    cursorPosition?: number;\n}\nexport const LineTextField = (props: LineTextFieldPropsType) => {\n\n    const onTextChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const text = e.currentTarget.value;\n        props.onChangeFunction(text)\n    }\n    const onIconClickHandler = () => {\n        if (props.onIconClickFunction) {\n            props.onIconClickFunction();\n        }\n    }\n\n    return <div className={s.lineTextDiv}>\n            <input \n                type={props.type} \n                value={props.text}\n                placeholder={props.placeholder || \"\"}\n                onChange={(e) => onTextChangeHandler(e)}\n                className={ props.error \n                    ? s.lineTextDecoration + \" \" + s.error + \" \" + props.className\n                    : s.lineTextDecoration + \" \" + props.className\n                }\n                autoFocus={props.autofocus}\n                onClick={props.onClickFunction}\n            />\n\n            {\n                props.icon && <img \n                        src={props.icon} \n                        className={s.icon}\n                        onClick={onIconClickHandler}\n                    />\n            }\n\n    </div>\n}","// extracted by mini-css-extract-plugin\nexport default {\"profileWrappedDiv\":\"profile_profileWrappedDiv__PVzle\",\"avaImg\":\"profile_avaImg__LlZre\",\"profile_head\":\"profile_profile_head__48EDv\",\"line_div\":\"profile_line_div__EbwTk\",\"user_interface_settings\":\"profile_user_interface_settings__qx1KJ\",\"user_interface_settings_one_block\":\"profile_user_interface_settings_one_block__eyX6L\",\"user_interface_settings_one_block_loading\":\"profile_user_interface_settings_one_block_loading__HErGi\",\"small_icons\":\"profile_small_icons__Ol70F\"};","// extracted by mini-css-extract-plugin\nexport default {\"input_div\":\"radioLabel_input_div__Le6S9\",\"ligend_input\":\"radioLabel_ligend_input__j-xRX\",\"ligend_input_checked\":\"radioLabel_ligend_input_checked__PunMU\",\"ligend_label\":\"radioLabel_ligend_label__jNcJi\",\"ligend_label_checked\":\"radioLabel_ligend_label_checked__zSnRs\"};","import s from './radioLabel.module.css';\nimport { MouseEvent } from 'react';\n\nexport type RadioLabelOptionType = {\n    text: string,\n    value: string\n}\n\nexport type RadioLabelsPropsType = {\n    options: Array<RadioLabelOptionType>,\n    defaultOption: string,\n    className?: string,\n    onClickFunction: (value: string) => void,\n\n}\nexport const RadioLabels = (props: RadioLabelsPropsType) => {\n\n    const onRadioInputClickHandler = (e: MouseEvent<HTMLInputElement>) => {\n        const value = e.currentTarget.value;\n        if ( props.options.some( el => el.value === value ) ) {\n            props.onClickFunction(value);\n        }\n    }\n\n    return <>\n        {\n            props.options.map( (o:RadioLabelOptionType, elemIndex: number) => {\n                return <div className={s.input_div} key={o.value + \"_\" + String(elemIndex)}>\n\n                <input type=\"radio\" id={o.value + \"_\" + String(elemIndex)} name={o.value + \"_\" + String(elemIndex)} \n                    className={ o.value === props.defaultOption\n                            ? s.ligend_input + \" \" + s.ligend_input_checked\n                            : s.ligend_input\n                    }\n                    value={o.value}\n                    onClick={(e) => onRadioInputClickHandler(e)}\n                />\n                \n                <label \n                    htmlFor={o.value + \"_\" + String(elemIndex)}\n                    className={ o.value === props.defaultOption \n                                    ? s.ligend_label + \" \" + s.ligend_label_checked\n                                    : s.ligend_label\n                            }\n                >\n                    { o.text }\n                </label>\n\n            </div>\n            })\n        }\n    </>\n}","import { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { t } from \"i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { BRICK_VIEW, ProfileUserSettingsType, TABLE_VIEW, LayoutOptionsType, changeLoadingStatus } from \"../../store/features/authSlice\";\nimport { ProfileRequestType, updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst Checker = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const currentLayout:LayoutOptionsType = useSelector((state:RootState) => state.auth.userSettings.layout);\n    // const currentView:ViewOptionsType = useSelector((state:RootState) => state.supplier.settings.view);\n    const dispatch = useAppDispatch();\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.layoutLoadingStatus);\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        if (newValue===TABLE_VIEW || newValue===BRICK_VIEW) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     layout: newValue,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"layoutLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({layout: newValue}));\n            // dispatch(changeViewAC(newValue))\n        }\n    }\n\n    const options:Array<RadioLabelOptionType> = [\n        {\n            text: t(\"profile_view_table\"),\n            value: TABLE_VIEW,\n        },\n        {\n            text: t(\"profile_view_brick\"),\n            value: BRICK_VIEW,\n        }\n    ]\n\n    return <>\n    {\n        isLoading\n            ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                <Preloader />\n            </div>\n            : <div className={s.user_interface_settings_one_block}>\n                <h3>{ t(\"profile_view_legend\") }</h3>\n                <RadioLabels \n                    options={options}\n                    defaultOption={currentLayout}\n                    onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                />\n            </div>\n    }\n    </>\n    \n}\n\nexport default Checker;\n","import { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { changeLoadingStatus, RiskViewSTAR, RiskViewType, RiskViewWORD } from \"../../store/features/authSlice\";\nimport { updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst ProfileRiskViewChecker = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const riskView:RiskViewType = useSelector((state:RootState) => state.auth.userSettings.risk_format);\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.riskFormatLoadingStatus);\n    \n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        if (newValue === RiskViewSTAR || newValue === RiskViewWORD) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     risk_format: newValue,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"riskFormatLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({risk_format: newValue}));\n        }\n    }\n\n    const options:Array<RadioLabelOptionType> = [\n        {\n            text: t(\"profile_risk_view_word\"),\n            value: RiskViewWORD,\n        },\n        {\n            text: t(\"profile_risk_view_star\"),\n            value: RiskViewSTAR,\n        }\n    ]\n    \n    return <>\n        {\n            isLoading\n                ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                    <Preloader />\n                </div>\n                : <div className={s.user_interface_settings_one_block}>\n                    <h3>{ t(\"profile_risk_view_title\") }</h3>\n                    <RadioLabels \n                        options={options}\n                        defaultOption={riskView}\n                        onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                    />\n                </div>\n        }\n    </>\n}\n\nexport default ProfileRiskViewChecker;","import { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { changeLoadingStatus, DATE_EU, DATE_US, FormatDateType, ProfileUserSettingsType } from \"../../store/features/authSlice\";\nimport { ProfileRequestType, updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst InterfaceDateFormat = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n    // const userName:string = useSelector((state: RootState) => state.auth.username);\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const dateFormat:FormatDateType = useSelector((state:RootState) => state.auth.userSettings.date_format);\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.dateFormatLoadingStatus);\n\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        if (newValue === DATE_EU || newValue === DATE_US) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     date_format: newValue,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"dateFormatLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({date_format: newValue,}));\n        }\n    }\n\n    const options:Array<RadioLabelOptionType> = [\n        {\n            text: t(\"profile_date_format_EU\"),\n            value: DATE_EU,\n        },\n        {\n            text: t(\"profile_date_format_US\"),\n            value: DATE_US,\n        }\n    ]\n    \n    return <>\n        {\n            isLoading\n                ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                    <Preloader />\n                </div>\n                : <div className={s.user_interface_settings_one_block}>\n                    <h3>{ t(\"profile_date_format_title\") }</h3>\n                    <RadioLabels \n                        options={options}\n                        defaultOption={dateFormat}\n                        onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                    />\n                </div>\n        }\n    </>\n}\n\nexport default InterfaceDateFormat;","import { useSelector } from \"react-redux\";\n// import { changePageSizingAC, changeRiskInLineAC, pageSizeOptions, RiskViewSTAR, RiskViewType, RiskViewWORD } from \"../../store/features/supplierSlice\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport { RadioLabelOptionType, RadioLabels } from \"../common/radioLabels/radioLabels\";\nimport s from './profile.module.css';\nimport { changeLoadingStatus, pageSizeOptions, ProfileUserSettingsType } from \"../../store/features/authSlice\";\nimport { ProfileRequestType, updateProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\n\nconst InterfacePageSizing = () => {\n    // const myName:string = useSelector((state:RootState) => state.auth.name);\n    // const userName:string = useSelector((state: RootState) => state.auth.username);\n\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    const currentPageSize:number = useSelector((state:RootState) => state.auth.userSettings.items_per_page);\n    const isLoading: boolean = useSelector((state:RootState) => state.auth.loadingStatus.itemsPerPageLoadingStatus);\n\n    const onViewChangeClickHandler = (newValue: string) => {\n        const intVal = Number(newValue);\n        if (pageSizeOptions.some( s => s === intVal)) {\n            // const dataForThunk:ProfileRequestType = {\n            //     ...userSettings,\n            //     items_per_page: intVal,\n            //     name: myName,\n            // }\n            dispatch(changeLoadingStatus({field: \"itemsPerPageLoadingStatus\", newValue: true}))\n            dispatch(updateProfileThunk({items_per_page: intVal}));\n          }\n    }\n\n    const options:Array<RadioLabelOptionType> = pageSizeOptions.map( s => {\n        return {\n            text: String(s),\n            value: String(s)\n        }\n    })\n    \n    return <>\n        {\n            isLoading\n                ? <div className={s.user_interface_settings_one_block + \" \" + s.user_interface_settings_one_block_loading}>\n                    <Preloader />\n                </div>\n                : <div className={s.user_interface_settings_one_block}>\n                    <h3>{ t(\"profile_page_size_title\") }</h3>\n                    <RadioLabels \n                        options={options}\n                        defaultOption={String(currentPageSize)}\n                        onClickFunction={(newValue: string) => onViewChangeClickHandler(newValue)}\n                    />\n                </div>\n        }\n    </>\n}\n\nexport default InterfacePageSizing;","import { useTranslation } from 'react-i18next';\nimport s from './profile.module.css';\nimport iconUpdate from \"../../public/icons/icon_update.png\";\nimport iconDone from \"../../public/icons/icon_done.png\";\nimport iconCross from \"../../public/icons/icon_cross.png\";\nimport { useState } from 'react';\nimport { LineTextField } from '../common/labelTextField/labelLineText';\nimport { useSelector } from 'react-redux';\nimport { RootState, useAppDispatch } from '../../store/store';\nimport { ProfileUserSettingsType } from '../../store/features/authSlice';\nimport { updateProfileThunk } from '../../store/features/authThunks';\n\nconst ProfileHeadFieldName = () => {\n    const {t} = useTranslation();\n\n    const myName: string = useSelector((state: RootState) => state.auth.name);\n    // const newName: string = useSelector((state: RootState) => state.auth.vars.newNameInput);\n    const [newName, setNewName] = useState<string>(myName);\n    const [isChange, setIsChange] = useState<boolean>(false);\n    // const userSettings:ProfileUserSettingsType = useSelector((state:RootState) => state.auth.userSettings);\n    // const username: string = useSelector((state:RootState) => state.auth.username);\n    const dispatch = useAppDispatch();\n\n    const onDoneIconClickHandler = () => {\n        setIsChange(false);\n        dispatch(updateProfileThunk({name: newName}));\n    }\n    const crossIconClickHandler = () => {\n        setIsChange(false);\n        setNewName(myName);\n    }\n\n    return <div className={s.line_div}>\n\n        <label>{t(\"profile_name\")}:</label>\n\n        {\n            !isChange\n                ? <h2>{myName}</h2>\n                : <LineTextField \n                    type='text'\n                    text={newName}\n                    onChangeFunction={(newValue: string) => setNewName(newValue)}\n                />\n        }\n        {\n            !isChange\n                ? <img src={iconUpdate} className={s.small_icons} onClick={() => setIsChange(true)}/>\n                : <>\n                    <img src={iconDone} className={s.small_icons} onClick={onDoneIconClickHandler}/>\n                    <img src={iconCross} className={s.small_icons} onClick={crossIconClickHandler}/>\n                </>\n        }\n\n    </div>\n}\n\nexport default ProfileHeadFieldName;","import { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport ava from \"./../../public/images/ava.jpg\";\nimport s from './profile.module.css';\nimport ProfileHeadFieldName from \"./profileHeadName\";\n\nconst ProfileHead = () => {\n    const {t} = useTranslation();\n    const myUsername: string = useSelector((state: RootState) => state.auth.username);\n\n    return <div className={s.profile_head}>\n        <img src={ava} className={s.avaImg} alt=\"Заменить аватар\" />\n\n        <ProfileHeadFieldName />\n\n        <div className={s.line_div}>\n            <label>{t(\"profile_username\")}:</label>\n            <h2>{myUsername}</h2>\n        </div>\n\n        {/* \n            <ProfileHeadField \n                text={ t(\"profile_role\") }\n                value={profileRole}\n                onChangeFunction={(newValue: string) => onProfileRoleChangeHandler(newValue)}\n            />\n        */}\n    </div>\n}\n\nexport default ProfileHead;","import s from \"./profile.module.css\";\nimport TableBrickChecker from \"./interfaceTableView\";\nimport { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { useTranslation } from \"react-i18next\";\nimport ProfileRiskViewChecker from \"./interfaceRiskView\";\nimport InterfaceDateFormat from \"./interfaceDataFormat\";\nimport InterfacePageSizing from \"./interfacePageSizing\";\nimport { useEffect } from \"react\";\nimport { getProfileThunk } from \"../../store/features/authThunks\";\nimport Preloader from \"../common/preloader/preloader\";\nimport ProfileHead from \"./profileHead\";\n\n\nconst Profile = () => {\n    // const userRole:RoleType = useSelector((state: RootState) => state.auth.role);\n    const { t } = useTranslation();\n    // const navigate = useNavigate();\n    const dispatch = useAppDispatch();\n\n    useEffect( () => {\n        dispatch(getProfileThunk());\n    }, []);\n\n    const isLoading:boolean = useSelector((state:RootState) => state.auth.loadingStatus.profileRequestLoadingStatus);\n\n    return <>\n        {\n            isLoading\n                ? <div className={s.profileWrappedDiv}>\n                    <Preloader />\n                </div>\n                : <div className={s.profileWrappedDiv}>\n\n                    <ProfileHead />    \n        \n                    <h2>{ t(\"profile_user_interface_settings\") }</h2>\n                    <div className={s.user_interface_settings}>\n                        <TableBrickChecker />\n                        <ProfileRiskViewChecker />\n                        <InterfaceDateFormat />\n                        <InterfacePageSizing />\n                        {/* <div className={s.user_interface_settings_one_block}>\n                            <Preloader/>\n                        </div> */}\n                    </div>\n                    \n            </div>\n        }\n    </>\n}\n\nexport default Profile;"],"names":["LineTextField","props","className","s","type","value","text","placeholder","onChange","e","preventDefault","stopPropagation","currentTarget","onChangeFunction","onTextChangeHandler","error","autoFocus","autofocus","onClick","onClickFunction","icon","src","onIconClickFunction","RadioLabels","options","map","o","elemIndex","id","String","name","defaultOption","some","el","onRadioInputClickHandler","htmlFor","currentLayout","useSelector","state","auth","userSettings","layout","dispatch","useAppDispatch","isLoading","loadingStatus","layoutLoadingStatus","t","TABLE_VIEW","BRICK_VIEW","newValue","changeLoadingStatus","field","updateProfileThunk","onViewChangeClickHandler","riskView","risk_format","riskFormatLoadingStatus","useTranslation","RiskViewWORD","RiskViewSTAR","dateFormat","date_format","dateFormatLoadingStatus","DATE_EU","DATE_US","currentPageSize","items_per_page","itemsPerPageLoadingStatus","pageSizeOptions","intVal","Number","myName","useState","newName","setNewName","isChange","setIsChange","myUsername","username","ava","alt","useEffect","getProfileThunk","profileRequestLoadingStatus"],"sourceRoot":""}