{"version":3,"file":"static/js/8.cf3e7052.chunk.js","mappings":"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","sources":["webpack://questionare/./src/components/common/buttons/buttons.module.css?43c5","components/common/buttons/buttons.tsx","webpack://questionare/./src/components/common/labelTextField/labelLineText.module.css?43aa","components/common/labelTextField/labelLineText.tsx","webpack://questionare/./src/components/newSupplier/newSupplier.module.css?89a1","components/newSupplier/newSupplierButtons.tsx","components/newSupplier/newSupplierLinkCreated.tsx","components/newSupplier/newSupplier.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonOk\":\"buttons_buttonOk__Yve+Q\",\"buttonCancel\":\"buttons_buttonCancel__q9INi\"};","import { useSelector } from \"react-redux\";\nimport { DARK, LIGHT } from \"../../../hooks/useTheme\";\nimport { RootState } from \"../../../store/store\";\nimport s from \"./buttons.module.css\";\n\ntype ButtonPropsType = {\n    text: string,\n    onClickFunction: () => void,\n    className?: string\n}\n\nexport const ButtonOK = (props: ButtonPropsType) => {\n    return <button\n        onClick={props.onClickFunction}\n        className={s.buttonOk + \" \" + props.className}\n        // autoFocus={true}\n    >\n        {props.text}\n    </button>\n}\n\nexport const ButtonCancel = (props: ButtonPropsType) => {\n    return <button\n        onClick={props.onClickFunction}\n        className={s.buttonCancel}\n    >\n        {props.text}\n    </button>\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"lineTextDiv\":\"labelLineText_lineTextDiv__VTp64\",\"lineTextDecoration\":\"labelLineText_lineTextDecoration__vf3qZ\",\"error\":\"labelLineText_error__kyQCn\",\"icon\":\"labelLineText_icon__Cq+yk\"};","import { ChangeEvent } from \"react\";\nimport s from \"./labelLineText.module.css\";\n\ntype LineTextFieldPropsType = {\n    type: 'text' | 'password' | 'date',\n    text: string,\n    placeholder?: string | null,\n    error?: boolean,\n    onChangeFunction: (text: string) => void,\n    className?: string,\n    icon?: any,\n    onIconClickFunction?: () => void,\n    autofocus?: boolean\n    onClickFunction?: ()=> void,\n    cursorPosition?: number;\n}\nexport const LineTextField = (props: LineTextFieldPropsType) => {\n\n    const onTextChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const text = e.currentTarget.value;\n        props.onChangeFunction(text)\n    }\n    const onIconClickHandler = () => {\n        if (props.onIconClickFunction) {\n            props.onIconClickFunction();\n        }\n    }\n\n    return <div className={s.lineTextDiv}>\n            <input \n                type={props.type} \n                value={props.text}\n                placeholder={props.placeholder || \"\"}\n                onChange={(e) => onTextChangeHandler(e)}\n                className={ props.error \n                    ? s.lineTextDecoration + \" \" + s.error + \" \" + props.className\n                    : s.lineTextDecoration + \" \" + props.className\n                }\n                autoFocus={props.autofocus}\n                onClick={props.onClickFunction}\n            />\n\n            {\n                props.icon && <img \n                        src={props.icon} \n                        className={s.icon}\n                        onClick={onIconClickHandler}\n                    />\n            }\n\n    </div>\n}","// extracted by mini-css-extract-plugin\nexport default {\"newWrapper\":\"newSupplier_newWrapper__PDdSD\",\"fields\":\"newSupplier_fields__el0CS\",\"fields_width\":\"newSupplier_fields_width__5iJqt\",\"oneField\":\"newSupplier_oneField__BBozZ\",\"labelText\":\"newSupplier_labelText__1OICM\",\"buttonsDiv\":\"newSupplier_buttonsDiv__bNH-C\",\"btn_width\":\"newSupplier_btn_width__UJ4ha\",\"newSupplier_link_div\":\"newSupplier_newSupplier_link_div__CGsDC\",\"newSupplier_link_link\":\"newSupplier_newSupplier_link_link__zatX7\",\"newSupplier_link_link_width1\":\"newSupplier_newSupplier_link_link_width1__rmLo9\",\"error\":\"newSupplier_error__UwALU\",\"copy_icon\":\"newSupplier_copy_icon__kDYA+\",\"newSupplierButtons\":\"newSupplier_newSupplierButtons__9UtRq\"};","import { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { newSupplierChangeInfoAC, newSupplierInitData } from \"../../store/features/newSupplierSlice\";\nimport { useAppDispatch } from \"../../store/store\";\nimport { ButtonCancel, ButtonOK } from \"../common/buttons/buttons\";\nimport { PATHS } from \"../outlet/outlet\";\nimport s from \"./newSupplier.module.css\";\n\ntype NewSupplierFirstButtonsPropsType = { onClick: () => void }\n\nexport const NewSupplierFirstButtons = (props: NewSupplierFirstButtonsPropsType) => {\n    const {t} = useTranslation();\n\n    return <div className={s.buttonsDiv + \" \" + s.btn_width}>\n        <ButtonOK \n            text={ t(\"newSupplier_create_new\") }\n            onClickFunction={props.onClick}\n        />\n        <ButtonCancel \n            text={ t(\"newSupplier_cancel_new\") }\n            onClickFunction={props.onClick}\n        />\n    </div>\n}\n\nexport const NewSupplierSecondButtons = () => {\n\n    const navigate = useNavigate();\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const onNewCompanyClickHandler = () => {\n        dispatch(newSupplierChangeInfoAC(newSupplierInitData))\n    }\n    const mainPageClickHandler = () => {\n        dispatch(newSupplierChangeInfoAC(newSupplierInitData))\n        navigate(PATHS.dashboard)\n    }\n\n\n    return <div className={s.newSupplierButtons}>\n        <ButtonOK\n            text={ t(\"newSupplier_goToMainPage\")}\n            onClickFunction={mainPageClickHandler}\n        />\n        <ButtonOK \n            text={ t(\"newCompany\") }\n            onClickFunction={onNewCompanyClickHandler}\n        />\n    </div>\n}\n","import { useState } from \"react\";\nimport { LineTextField } from \"../common/labelTextField/labelLineText\";\nimport s from \"./newSupplier.module.css\";\nimport iconCopyGreen from '../../public/icons/icon_copy_green.png';\nimport iconCopyBlue from '../../public/icons/icon_copy_blue.png';\n\ntype NewSuplierLinkCreatedPropsType = { newSupplierLink: string }\n\nconst NewSuplierLinkCreated = (props: NewSuplierLinkCreatedPropsType) => {\n\n    const [copyLinkSuccess, setCopyLinkSuccess] = useState<boolean>(false);\n\n    const delay = (seconds: number) => new Promise(resolve => setTimeout(resolve,seconds*1000)) \n\n    const copyToBuffer = async () => {\n        navigator.clipboard.writeText(props.newSupplierLink)\n        .then(async () => {\n            setCopyLinkSuccess(true);\n            await delay(3);\n            setCopyLinkSuccess(false);\n        })\n        .catch(err => {\n            console.log('Something went wrong', err);\n        });\n    }\n\n    return <div className={s.newSupplier_link_link}>\n        <LineTextField\n            type='text'\n            text={ props.newSupplierLink }\n            onChangeFunction={() => {}}\n            className={s.newSupplier_link_link_width1}\n        />\n        {\n            copyLinkSuccess \n                ? <img src={iconCopyGreen} className={s.copy_icon}/>\n                : <img src={iconCopyBlue} className={s.copy_icon} onClick={() => copyToBuffer()}/>\n        }\n    </div>\n}\n\nexport default NewSuplierLinkCreated;","import { useState } from 'react';\nimport { LineTextField } from '../common/labelTextField/labelLineText';\nimport s from './newSupplier.module.css';\nimport { useTranslation } from 'react-i18next';\nimport iconTicket from \"../../public/icons/purchase_ticket.png\";\nimport iconCompany from \"../../public/icons/icon_company.png\";\nimport { RootState, useAppDispatch } from '../../store/store';\nimport { useSelector } from 'react-redux';\nimport { createNewSupplierThunk, newSupplierChangeInfoAC, NewSupplierType } from '../../store/features/newSupplierSlice';\nimport Preloader from '../common/preloader/preloader';\nimport { NewSupplierSecondButtons, NewSupplierFirstButtons } from './newSupplierButtons';\nimport NewSuplierLinkCreated from './newSupplierLinkCreated';\n\n\nconst NewSupplier = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const company: string = useSelector((state: RootState) => state.newSupplier.company)\n    const ticket: string = useSelector((state: RootState) => state.newSupplier.ticket)\n    const newSupplierLink: string = useSelector((state:RootState) => state.newSupplier.link);\n    const isLoading: boolean = useSelector((state:RootState) => state.newSupplier.isLoading);\n    const [error, setError] = useState<string>('');\n\n    // const createdSupplierName:string = useSelector((state:RootState) => state.newSupplier.company);\n    // const createdSupplierTicket: string | null = useSelector((state:RootState) => state.newSupplier.ticket);\n\n    const onNewSupplierNameChangeHandler = (newText: string) => {\n        dispatch(newSupplierChangeInfoAC( {company: newText} ));\n        setError('');\n    }\n    const onSupplierTicketChangeHandler = (newText: string) => {\n        dispatch(newSupplierChangeInfoAC( {ticket: newText} ));\n        setError('');\n    }\n\n    const onNewSupplierCreateClickHandler = () => {\n        if (company.length > 0) {\n            dispatch(createNewSupplierThunk({company: company, ticket: ticket}));\n        } else {\n            const errorMessage:string = t(\"required_field\");\n            setError(errorMessage);\n        }\n    }\n\n    return <div className={s.newWrapper}>\n        <div>\n            <h1>{ t(\"newSupplier_title\") }</h1>\n        </div>\n\n        {\n            newSupplierLink.length === 0 && <>\n            \n                    <div className={s.fields}>\n                        <div className={s.oneField + \" \" + s.fields_width}>\n                            <label>{ t(\"newSupplier_name\") }</label>\n\n                            <LineTextField \n                                type='text'\n                                text={company}\n                                placeholder={ t(\"newSupplier_name_placeholder\") }\n                                error={error.length > 0}\n                                onChangeFunction={ (newText:string) => onNewSupplierNameChangeHandler(newText) }\n                                className={s.labelText + \" \" + s.company_label_width}\n                                autofocus={true}\n                                icon={iconCompany}\n                            />\n\n                            {\n                                error.length > 0 && <div className={s.error}>{ t(\"required_field\") }</div>\n                            }\n                        </div>\n\n                        <div className={s.oneField + \" \" + s.fields_width}>\n                            <label>{ t(\"newSupplier_ticketLink\") }</label>\n\n                            <LineTextField \n                                type='text'\n                                text={ticket}\n                                placeholder={ t(\"newSupplier_ticketLink_placeholder\") }\n                                onChangeFunction={ (newText:string) => onSupplierTicketChangeHandler(newText) }\n                                className={s.labelText}\n                                icon={iconTicket}\n                            />\n                        </div>\n\n                    </div>\n\n                    <NewSupplierFirstButtons onClick={onNewSupplierCreateClickHandler} />\n\n                </>\n        }\n\n        {\n            isLoading \n                ? <Preloader />\n                : <>\n                    {\n                        newSupplierLink.length > 0 && <div className={s.newSupplier_link_div}>\n                            <h3>{ t(\"newSupplier_link_send_it_1\") }</h3>\n\n                            <h3>\n                                { t(\"newSupplier_company_name\") } \n                                { company }\n                            </h3>\n                            {\n                                ticket && <h3>\n                                    { t(\"newSupplier_ticket\") }\n                                    { ticket }\n                                </h3>\n                            }\n                            \n\n                            <h3>{ t(\"newSupplier_link_send_it_2\") }</h3>\n\n\n                            <NewSuplierLinkCreated newSupplierLink={newSupplierLink}/>\n\n                            <NewSupplierSecondButtons />\n                        </div>\n                    }\n                </>\n            \n        }\n        \n    </div>\n}\n\nexport default NewSupplier;"],"names":["ButtonOK","props","onClick","onClickFunction","className","s","text","ButtonCancel","LineTextField","type","value","placeholder","onChange","e","preventDefault","stopPropagation","currentTarget","onChangeFunction","onTextChangeHandler","error","autoFocus","autofocus","icon","src","onIconClickFunction","NewSupplierFirstButtons","t","useTranslation","NewSupplierSecondButtons","navigate","useNavigate","dispatch","useAppDispatch","newSupplierChangeInfoAC","newSupplierInitData","PATHS","useState","copyLinkSuccess","setCopyLinkSuccess","delay","seconds","Promise","resolve","setTimeout","copyToBuffer","navigator","clipboard","writeText","newSupplierLink","then","catch","err","console","log","company","useSelector","state","newSupplier","ticket","link","isLoading","setError","length","newText","onNewSupplierNameChangeHandler","onSupplierTicketChangeHandler","iconTicket","createNewSupplierThunk","errorMessage"],"sourceRoot":""}