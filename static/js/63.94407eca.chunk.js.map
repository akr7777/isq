{"version":3,"file":"static/js/63.94407eca.chunk.js","mappings":"mLACA,EAA2B,4BAA3B,EAAoE,8B,iGCkFpE,EAnEkB,WACd,IAAOA,GAAKC,EAAAA,EAAAA,MAALD,EACDE,GAAWC,EAAAA,EAAAA,MAOXC,IANWC,EAAAA,EAAAA,MAMmBC,EAAAA,EAAAA,KAAY,SAACC,GAAe,OAAKA,EAAMC,SAASC,SAAS,KACvFC,GAAgCJ,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMI,KAAKC,aAAaC,WAAW,IAM3G,OAAO,+BACH,mBAAOC,UAAWC,EAAW,WACzB,4BACI,2BACI,wBACMf,EAAE,iBAGR,wBACMA,EAAE,0BAGR,wBACMA,EAAE,wBAGR,wBACMA,EAAE,sBAKhB,2BAEQI,EAAUY,KAAK,SAACC,EAAmBC,GAAW,OAC1C,gBAAIJ,UAAWC,EAAiCI,QAAS,kBA7B7CC,EA6B0EH,EAAEG,gBA5BxGlB,EAASmB,EAAAA,EAAAA,aAAqB,IAAMC,OAAOF,IADhB,IAACA,CA6BuF,EAAC,WAChG,0BAAI,uEACUF,EAAI,EAAE,uDAAaD,EAAEM,iBAEnC,wBACKN,EAAEO,cAAgBC,IAAMR,EAAEO,cAAcE,OAAOhB,MAEpD,wBACQO,EAAEU,YACI,gBAAKC,IAAKC,EAAKf,UAAWgB,EAAAA,EAAAA,YAA6BC,IAAI,MAC3D,gBAAKH,IAAKI,EAAIlB,UAAWgB,EAAAA,EAAAA,YAA6BC,IAAI,QAGxE,yBACI,SAAC,IAAU,CAACE,KAAMhB,EAAEgB,WAdMhB,EAAEG,WAgB/B,UAM7B,C,4GC5BA,EArCmB,SAAH,GAAqC,IAAhCa,EAAI,EAAJA,KACXC,GAAwB5B,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMI,KAAKC,aAAauB,WAAW,IAG/FC,EAAmB,GAQvB,OAPIH,IAASI,EAAAA,KACTD,EAAW,OACXH,IAASK,EAAAA,KACTF,EAAW,UACXH,IAASM,EAAAA,KACTH,EAAW,SAER,8BAECF,IAAaM,EAAAA,QACEC,IAATR,GAA+B,OAATA,IAAiB,gBACrCnB,UACImB,IAASI,EAAAA,GACHK,EAAAA,EAAAA,KAAgB,IAAMA,EAAAA,EAAAA,SACtBT,IAASK,EAAAA,GACLI,EAAAA,EAAAA,KAAgB,IAAMA,EAAAA,EAAAA,YACtBA,EAAAA,EAAAA,KAAgB,IAAMA,EAAAA,EAAAA,UACnC,SACCN,SAEKK,IAATR,GAA+B,OAATA,GAClB,gBAAKL,I,69DAAgBd,UAAW4B,EAAAA,EAAAA,OAChCT,IAASI,EAAAA,IACL,gBAAKT,I,qjFAAgBd,UAAW4B,EAAAA,EAAAA,OAChCT,IAASK,EAAAA,IACL,gBAAKV,I,qiFAAiBd,UAAW4B,EAAAA,EAAAA,QACjC,gBAAKd,I,y8EAAcd,UAAW4B,EAAAA,EAAAA,QAI5D,C","sources":["webpack://questionare/./src/components/dashboard/dataTable/dataTable.module.css?3ea8","components/dashboard/dataTable/dataTable.tsx","components/dashboard/riskInLine.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"theTable\":\"dataTable_theTable__vYeSU\",\"theTableTr\":\"dataTable_theTableTr__4ZBi0\"};","import { useSelector } from \"react-redux\";\nimport { SupplerDataType, SupplierIdType } from \"../../../store/features/supplierSlice\";\nimport { RootState, useAppDispatch } from \"../../../store/store\";\nimport s from './dataTable.module.css';\nimport dashboardStyles from \"./../dashboard.module.css\";\nimport yes from './../../../public/icons/var_yes.png';\nimport no from './../../../public/icons/var_no.png';\nimport { useNavigate } from \"react-router-dom\";\nimport { PATHS } from \"../../outlet/outlet\";\nimport RiskInLine from \"../riskInLine\";\nimport { useTranslation } from \"react-i18next\";\nimport dayjs from \"dayjs\";\nimport { FormatDateType } from \"../../../store/features/authSlice\";\nimport { useEffect } from \"react\";\nimport { getCompaniesThunk } from \"../../../store/features/supplierThunks\";\n\nconst DataTable = () => {\n    const {t} = useTranslation();\n    const navigate = useNavigate();\n    const dispatch = useAppDispatch();\n\n    // useEffect(() => {\n    //     // dispatch(getCompaniesThunk({}));\n    // }, [])\n\n    const companies:SupplerDataType[] = useSelector((state:RootState) => state.supplier.suppliers);\n    const userDateFormat:FormatDateType = useSelector((state: RootState) => state.auth.userSettings.date_format);\n\n    const onSupplierClickHandler = (supplierId: SupplierIdType) => {\n        navigate(PATHS.supplierCard + \"/\" + String(supplierId));\n    }\n    \n    return <>\n        <table className={s.theTable}>\n            <thead>\n                <tr>\n                    <td>\n                        { t(\"table_name\") }\n                        {/* <SortingIcons columnName={NAME_COLUMN_SORT}/> */}\n                    </td>\n                    <td>\n                        { t(\"table_creation_date\") }\n                        {/* <SortingIcons columnName={CREATION_DATE_COLUMN_SORT}/> */}\n                    </td>\n                    <td>\n                        { t(\"table_is_complite\") }\n                        {/* <SortingIcons columnName={COMPLITED_COLUMN_SORT}/> */}\n                    </td>\n                    <td>\n                        { t(\"table_risk\") }\n                        {/* <SortingIcons columnName={RISK_COLUMN_SORT}/> */}\n                    </td>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    companies.map( (c:SupplerDataType, ind: number) => \n                        <tr className={s.theTableTr} key={c.supplierId} onClick={() => onSupplierClickHandler(c.supplierId)}>\n                            <td>\n                            Номер строки {ind+1}, компания: {c.supplierName}\n                            </td>\n                            <td>\n                                {c.creationDate && dayjs(c.creationDate).format(userDateFormat)}\n                            </td>\n                            <td>{\n                                    c.filledDate\n                                        ? <img src={yes} className={dashboardStyles.icon_yes_no} alt=\"\"/>\n                                        : <img src={no} className={dashboardStyles.icon_yes_no} alt=\"\"/>\n                                }\n                            </td>\n                            <td>\n                                <RiskInLine risk={c.risk}/>\n                            </td>\n                        </tr>\n                    )\n                }\n            </tbody>\n        </table>\n    </>\n}\n            \n       \n\nexport default DataTable;","import { useSelector } from \"react-redux\";\n\nimport starBlack from \"../../public/icons/icon_star_black.png\" //../../../  ../../public/icons/icon_star_black.png\";\nimport starGreen from \"../../public/icons/icon_star_green.png\";\nimport starRed from \"../../public/icons/icon_star_red.png\";\nimport starYellow from \"../../public/icons/icon_star_yellow.png\";\nimport { RiskViewType, RiskViewWORD } from \"../../store/features/authSlice\";\n\nimport { RiskType, RISK_HIGH, RISK_LOW, RISK_MEDIUM } from \"../../store/features/supplierSlice\";\nimport { RootState } from \"../../store/store\";\n\nimport dbStyles from './dashboard.module.css';\n\ntype RiskInLinePropsType = { risk: RiskType }\nconst RiskInLine = ({risk}: RiskInLinePropsType) => {\n    const riskView:RiskViewType = useSelector((state: RootState) => state.auth.userSettings.risk_format);\n    // const riskView:RiskViewType = useSelector((state: RootState) => state.supplier.settings.riskView);\n\n    let riskWord: string = \"\";\n    if (risk === RISK_LOW)\n        riskWord = \"Low\";\n    if (risk === RISK_MEDIUM)\n        riskWord = \"Medium\";\n    if (risk === RISK_HIGH)\n        riskWord = \"High\";\n\n    return <>\n         {\n            riskView === RiskViewWORD\n                ? risk !== undefined && risk !== null && <div\n                    className={\n                        risk === RISK_LOW\n                            ? dbStyles.risk + \" \" + dbStyles.risk_low\n                            : risk === RISK_MEDIUM\n                                ? dbStyles.risk + \" \" + dbStyles.risk_medium\n                                : dbStyles.risk + \" \" + dbStyles.risk_high\n                    }>\n                    { riskWord }\n                </div>\n                : risk === undefined || risk === null\n                    ? <img src={starBlack} className={dbStyles.star}/>\n                    : risk === RISK_LOW\n                        ? <img src={starGreen} className={dbStyles.star}/>\n                        : risk === RISK_MEDIUM\n                            ? <img src={starYellow} className={dbStyles.star}/>\n                            : <img src={starRed} className={dbStyles.star}/>\n                \n        }\n    </>\n}\n\nexport default RiskInLine;"],"names":["t","useTranslation","navigate","useNavigate","companies","useAppDispatch","useSelector","state","supplier","suppliers","userDateFormat","auth","userSettings","date_format","className","s","map","c","ind","onClick","supplierId","PATHS","String","supplierName","creationDate","dayjs","format","filledDate","src","yes","dashboardStyles","alt","no","risk","riskView","risk_format","riskWord","RISK_LOW","RISK_MEDIUM","RISK_HIGH","RiskViewWORD","undefined","dbStyles"],"sourceRoot":""}