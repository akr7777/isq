{"version":3,"file":"static/js/88.e0b12536.chunk.js","mappings":"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","sources":["webpack://questionare/./src/components/common/buttons/buttons.module.css?43c5","components/common/buttons/buttons.tsx","webpack://questionare/./src/components/supplierCard/card.module.css?faf6","webpack://questionare/./src/components/common/multiLineText/text.module.css?c2c3","components/common/multiLineText/multilineText.tsx","webpack://questionare/./src/components/common/Options/options.module.css?7972","components/common/Options/options.tsx","components/supplierCard/changeZone.tsx","components/supplierCard/QA.tsx","components/supplierCard/supplierExistedRisk.tsx","components/supplierCard/supplierHead.tsx","components/supplierCard/supplierCard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"buttonOk\":\"buttons_buttonOk__Yve+Q\",\"buttonCancel\":\"buttons_buttonCancel__q9INi\"};","import { useSelector } from \"react-redux\";\nimport { DARK, LIGHT } from \"../../../hooks/useTheme\";\nimport { RootState } from \"../../../store/store\";\nimport s from \"./buttons.module.css\";\n\ntype ButtonPropsType = {\n    text: string,\n    onClickFunction: () => void,\n    className?: string\n}\n\nexport const ButtonOK = (props: ButtonPropsType) => {\n    return <button\n        onClick={props.onClickFunction}\n        className={s.buttonOk + \" \" + props.className}\n        // autoFocus={true}\n    >\n        {props.text}\n    </button>\n}\n\nexport const ButtonCancel = (props: ButtonPropsType) => {\n    return <button\n        onClick={props.onClickFunction}\n        className={s.buttonCancel}\n    >\n        {props.text}\n    </button>\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"cardWrapper\":\"card_cardWrapper__Cm9tU\",\"qaDiv\":\"card_qaDiv__GGl7f\",\"appearance\":\"card_appearance__Y0Kk3\",\"supplierArea\":\"card_supplierArea__xDj1v\",\"label_title_1\":\"card_label_title_1__Q06Kx\",\"label_title_2\":\"card_label_title_2__wErxz\",\"supplierHeadDates\":\"card_supplierHeadDates__M-H2a\",\"existedRisk\":\"card_existedRisk__S4P6c\",\"qaQuestion\":\"card_qaQuestion__5bZXK\",\"qaAnswer\":\"card_qaAnswer__Vu1Sl\",\"changeZoneDiv\":\"card_changeZoneDiv__4sCir\",\"risks\":\"card_risks__HFSVd\",\"low\":\"card_low__cwQNh\",\"medium\":\"card_medium__mCar8\",\"high\":\"card_high__MYC3T\",\"commentLabel\":\"card_commentLabel__-gwQk\",\"formErrorDiv\":\"card_formErrorDiv__m378M\",\"changeZone_Risk\":\"card_changeZone_Risk__XG-s8\",\"risk_width\":\"card_risk_width__DJUFC\",\"changeZone_Commet\":\"card_changeZone_Commet__xuCfy\",\"changeZone_SaveButton\":\"card_changeZone_SaveButton__GHdXG\",\"btn_padding\":\"card_btn_padding__S34ef\"};","// extracted by mini-css-extract-plugin\nexport default {\"textArea\":\"text_textArea__w+KVS\"};","\nimport { ChangeEvent } from 'react';\nimport s from './text.module.css';\n\ntype MuliLineTextPropsType = {\n    text: string,\n    onChangeFunction: (newText: string) => void,\n    cols?: number,\n    rows?: number,\n    autofocus?: boolean,\n}\n\nconst MuliLineText = (props: MuliLineTextPropsType) => {\n\n    const onChangeText = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.onChangeFunction(e.currentTarget.value)\n    }\n\n    return <textarea\n        className={s.textArea}\n        rows={props.rows ? props.rows : 9}\n        onChange={(e) => onChangeText(e)}\n        value={props.text}\n        autoFocus={props.autofocus}\n    />\n}\n\nexport default MuliLineText;","// extracted by mini-css-extract-plugin\nexport default {\"selectElement\":\"options_selectElement__UPGmt\",\"error\":\"options_error__5dkXV\"};","import { ChangeEvent } from 'react';\nimport s from './options.module.css';\n\nexport type OptionType = {\n    text: string | undefined,\n    value: string | undefined\n}\nexport type OptionsPropsType = {\n    options: Array<OptionType>,\n    defaultOption: string | undefined,\n    error?: boolean,\n    onChangeEvent: (value: string | undefined) => void\n}\nconst Options = (props: OptionsPropsType) => {\n\n    const onOptionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        props.onChangeEvent(e.currentTarget.value)\n    }\n\n    return <select \n                className={props.error \n                                ? s.selectElement + \" \" + s.error \n                                : s.selectElement\n                          } \n                onChange={(e) => onOptionChange(e)}\n                defaultValue={props.defaultOption}\n            >\n        {\n            props.options.map((o: OptionType, elIndex: number) => {\n                return <option \n                            key={elIndex} \n                            value={o.value}\n                            // selected={o.value === props.defaultOption}\n                            // className={s.oneOption}\n                        >\n                    {o.text}\n                </option>\n            })\n        }\n    </select>\n}\n\nexport default Options;","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { onRiskAndCommentChange, OnRiskAndCommentChangeType } from \"../../store/features/complitedSlice\";\nimport { RISK_HIGH, RISK_LOW, RISK_MEDIUM, RiskType } from \"../../store/features/supplierSlice\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport { ButtonOK } from \"../common/buttons/buttons\";\nimport MuliLineText from \"../common/multiLineText/multilineText\";\nimport Options from \"../common/Options/options\";\nimport cardStyle from \"./card.module.css\";\n\nconst ChangeZone = () => {\n    const dispatch = useAppDispatch();\n    const {t} = useTranslation();\n\n    const currentRisk:RiskType = useSelector((state:RootState) => state.complited.risk);\n    const comment:string = useSelector((state:RootState) => state.complited.comment);\n\n    const [error, setError] = useState<string>('');\n    const [newRisk, setNewRisk] = useState<RiskType>(currentRisk);\n    const [newComment, setNewComment] = useState<string>(comment);\n\n    const onNewRiskChanged = (value: string | undefined) => {\n        if ( value === RISK_LOW || value === RISK_MEDIUM || value === RISK_HIGH ) {\n            setNewRisk(value);\n            setError('');\n        } else {\n            setNewRisk(null);\n            const errorText: string =  t(\"required_field\");\n            setError(errorText)\n        }\n    }\n    const onNewCommitChangeHandler = (text: string) => {\n        setNewComment(text)\n    }\n    const onSaveClickHandler = () => {\n        if ( newRisk === RISK_LOW || newRisk === RISK_MEDIUM || newRisk === RISK_HIGH ) {\n            const newData:OnRiskAndCommentChangeType = {\n                risk: newRisk,\n                comment: newComment\n            }\n            dispatch(onRiskAndCommentChange(newData));\n        } else {\n            const errorText: string =  t(\"required_field\");\n            setError(errorText)\n        }\n    }\n\n    \n\n    return <div className={cardStyle.changeZoneDiv + \" \" + cardStyle.appearance}>\n\n        <div className={cardStyle.changeZone_Risk + \" \" + cardStyle.risk_width}>\n            <label>{ t(\"supplierCard_risk\") }</label> \n            <Options \n                options={[\n                    {text: \"-\", value: undefined},\n                    {text: \"Low\", value: RISK_LOW},\n                    {text: \"Medium\", value: RISK_MEDIUM},\n                    {text: \"High\", value: RISK_HIGH}\n                ]}\n                defaultOption={currentRisk || undefined}\n                onChangeEvent={ (value) => onNewRiskChanged(value) }\n                error={error.length > 0}\n            />\n            <div className={cardStyle.formErrorDiv}>\n                {error}\n            </div>\n        </div>\n\n        <div className={cardStyle.changeZone_Commet}>\n            <label>{ t(\"supplierCard_comment\") }</label>\n            <MuliLineText\n                text={newComment}\n                onChangeFunction={(text) => onNewCommitChangeHandler(text)}\n                autofocus={true}\n            />\n        </div>\n        <div className={cardStyle.changeZone_SaveButton}>\n            <div className={cardStyle.btn_padding}>\n                <ButtonOK\n                    text={ t(\"save\") }\n                    onClickFunction={onSaveClickHandler}\n                />\n            </div>\n        </div>\n        \n    </div>\n}\n\nexport default ChangeZone;","import { useTranslation } from 'react-i18next';\nimport cardStyle from './card.module.css';\n\nconst QA = () => {\n    const {t} = useTranslation();\n    \n    return <div className={cardStyle.qaDiv + \" \" + cardStyle.appearance}>\n        <div className={cardStyle.qaQuestion}>\n            <label>Вопрос 1</label>\n        </div>\n        <div className={cardStyle.qaAnswer}>\n            <label>Ответы на вопрос 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</label>\n        </div>\n        <div className={cardStyle.qaQuestion}>\n            <label>Вопрос 2</label>\n        </div>\n        <div className={cardStyle.qaAnswer}>\n            <label>Ответы на вопрос 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</label>\n        </div>\n        \n    </div>\n}\n\nexport default QA;","import { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { RISK_HIGH, RISK_LOW, RISK_MEDIUM, RiskType } from \"../../store/features/supplierSlice\";\nimport { RootState } from \"../../store/store\";\nimport cardStyle from \"./card.module.css\";\n\nconst SupplierExistedRisk = () => {\n    const {t} = useTranslation();\n\n    const currentRisk:RiskType = useSelector((state:RootState) => state.complited.risk);\n    const currentComment:string = useSelector((state:RootState) => state.complited.comment);\n\n    return <div className={cardStyle.existedRisk + \" \" + cardStyle.appearance}>\n        <div className={cardStyle.risks}>\n            <h1 className={\n                currentRisk === RISK_LOW\n                    ? cardStyle.low\n                    : currentRisk === RISK_MEDIUM\n                        ? cardStyle.medium\n                        : currentRisk === RISK_HIGH\n                            ? cardStyle.high\n                            : \"\"\n            }>\n                {currentRisk}\n            </h1>\n        </div>\n\n        <div className={cardStyle.commentLabel}>\n            <label className={cardStyle.label_title_2}>\n                { t(\"supplierCard_comment\") }\n            </label>\n            <p>\n                {currentComment}\n            </p>\n        </div>\n    </div>\n}\n\nexport default SupplierExistedRisk;","import { useTranslation } from \"react-i18next\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../store/store\";\nimport cardStyles from \"./card.module.css\";\n\nconst SupplierHead = () => {\n    const {t} = useTranslation();\n\n    const supplierName: string = useSelector((state:RootState) => state.complited.supplierName);\n    const creationDate: string = useSelector((state: RootState) => state.complited.creationDate);\n    const complitedDate: string = useSelector((state: RootState) => state.complited.complitedDate) || \"-\";\n    const checkedDate: string = useSelector((state: RootState) => state.complited.checkedDate) || \"-\";\n\n    return <div className={cardStyles.supplierArea + \" \" + cardStyles.appearance}>\n        <label className={cardStyles.label_title_1}>\n            {supplierName}\n        </label>\n        <div className={cardStyles.supplierHeadDates}>\n            <label>{ t(\"supplierCard_creation_date\") } {creationDate}</label>\n            <label>{ t(\"supplierCard_complited_date\") } {complitedDate}</label>\n            <label>{ t(\"supplierCard_checked_date\") } {checkedDate}</label>\n        </div>\n    </div>\n}\n\nexport default SupplierHead;","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { RootState, useAppDispatch } from \"../../store/store\";\nimport Preloader from \"../common/preloader/preloader\";\nimport cardStyles from \"./card.module.css\";\nimport ChangeZone from \"./changeZone\";\nimport QA from \"./QA\";\nimport SupplierExistedRisk from \"./supplierExistedRisk\";\nimport SupplierHead from \"./supplierHead\";\n\nconst SupplierCard = () => {\n    const { supplierId } = useParams();\n    const dispatch = useAppDispatch();\n\n    const [l, setL] = useState(true);\n    \n    \n\n    const checkedDate: string = useSelector((state:RootState) => state.complited.checkedDate);\n\n    return <div className={cardStyles.cardWrapper}>\n\n        supplier CARD #{supplierId}\n        <button onClick={() => setL(!l)}>\n            Нажми на меня, чтобы завершить или начать заново загрузку.....\n        </button>\n\n        { \n            l && <Preloader /> \n        }\n\n        {\n            !l && <>\n                <SupplierHead />\n                { checkedDate.length > 0 && <SupplierExistedRisk/> }\n                <QA />\n                <ChangeZone />\n            </>\n        }\n        \n    </div>\n}\n\nexport default SupplierCard;"],"names":["ButtonOK","props","onClick","onClickFunction","className","s","text","ButtonCancel","rows","onChange","e","onChangeFunction","currentTarget","value","onChangeText","autoFocus","autofocus","error","onChangeEvent","onOptionChange","defaultValue","defaultOption","options","map","o","elIndex","dispatch","useAppDispatch","t","useTranslation","currentRisk","useSelector","state","complited","risk","comment","useState","setError","newRisk","setNewRisk","newComment","setNewComment","cardStyle","undefined","RISK_LOW","RISK_MEDIUM","RISK_HIGH","errorText","onNewRiskChanged","length","onNewCommitChangeHandler","newData","onRiskAndCommentChange","currentComment","supplierName","creationDate","complitedDate","checkedDate","cardStyles","supplierId","useParams","l","setL"],"sourceRoot":""}