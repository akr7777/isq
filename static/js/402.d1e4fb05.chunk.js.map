{"version":3,"file":"static/js/402.d1e4fb05.chunk.js","mappings":"oLACA,EAAiC,mCAAjC,EAAwF,sCAAxF,EAA0I,8BAA1I,EAAmL,6BAAnL,EAAgO,kC,iGCuFhO,EArEmB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MAEVC,IADUC,EAAAA,EAAAA,MACLC,EAAAA,EAAAA,MAALF,GAUDG,GAA8BC,EAAAA,EAAAA,KAAY,SAACC,GAAe,OAAKA,EAAMC,SAASC,SAAS,IACvFC,GAAgCJ,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMI,KAAKC,aAAaC,WAAW,IAM3G,OAAO,iBAAKC,UAAWC,EAAoB,WAEvC,iBAAKD,UAAWC,EAAY,WACxB,gBAAKD,UAAWC,EAAiB,UAC7B,2BAASb,EAAE,mBAEf,gBAAKY,UAAWC,EAAiB,UAC7B,2BAASb,EAAE,4BAEf,gBAAKY,UAAWC,EAAiB,UAC7B,2BAASb,EAAE,0BAEf,gBAAKY,UAAWC,EAAiB,UAC7B,2BAASb,EAAE,qBAKfG,EAAUW,KAAK,SAACC,EAAmBC,GAC/B,OAAO,iBACKJ,UAAWC,EAEXI,QAAS,kBA1BDC,EA0B8BH,EAAEG,gBAzB5DpB,EAASqB,EAAAA,EAAAA,aAAqB,IAAMC,OAAOF,IADhB,IAACA,CA0B2C,EAAC,WAE5D,iBAAKN,UAAWC,EAAgB,UAAC,uEACfG,EAAI,EAAE,uDAAaD,EAAEM,iBAEvC,gBAAKT,UAAWC,EAAgB,SAC3BE,EAAEO,cAAgBC,IAAMR,EAAEO,cAAcE,OAAOhB,MAEpD,gBAAKI,UAAWC,EAAgB,SAExBE,EAAEU,YACI,gBAAKC,IAAKC,EAAKf,UAAWgB,EAAAA,EAAAA,YAAsBC,IAAI,MACpD,gBAAKH,IAAKI,EAAIlB,UAAWgB,EAAAA,EAAAA,YAAsBC,IAAI,QAGjE,gBAAKjB,UAAWC,EAAgB,UAC5B,SAAC,IAAU,CAACkB,KAAMhB,EAAEgB,WAjBXhB,EAAEG,WAoBvB,MAMZ,C,4GCnCA,EArCmB,SAAH,GAAqC,IAAhCa,EAAI,EAAJA,KACXC,GAAwB5B,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMI,KAAKC,aAAauB,WAAW,IAG/FC,EAAmB,GAQvB,OAPIH,IAASI,EAAAA,KACTD,EAAW,OACXH,IAASK,EAAAA,KACTF,EAAW,UACXH,IAASM,EAAAA,KACTH,EAAW,SAER,8BAECF,IAAaM,EAAAA,QACEC,IAATR,GAA+B,OAATA,IAAiB,gBACrCnB,UACImB,IAASI,EAAAA,GACHP,EAAAA,EAAAA,KAAgB,IAAMA,EAAAA,EAAAA,SACtBG,IAASK,EAAAA,GACLR,EAAAA,EAAAA,KAAgB,IAAMA,EAAAA,EAAAA,YACtBA,EAAAA,EAAAA,KAAgB,IAAMA,EAAAA,EAAAA,UACnC,SACCM,SAEKK,IAATR,GAA+B,OAATA,GAClB,gBAAKL,I,69DAAgBd,UAAWgB,EAAAA,EAAAA,OAChCG,IAASI,EAAAA,IACL,gBAAKT,I,qjFAAgBd,UAAWgB,EAAAA,EAAAA,OAChCG,IAASK,EAAAA,IACL,gBAAKV,I,qiFAAiBd,UAAWgB,EAAAA,EAAAA,QACjC,gBAAKF,I,y8EAAcd,UAAWgB,EAAAA,EAAAA,QAI5D,C","sources":["webpack://questionare/./src/components/dashboard/dataBricks/dataBricks.module.css?9504","components/dashboard/dataBricks/dataBricks.tsx","components/dashboard/riskInLine.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"brickHeadPeice\":\"dataBricks_brickHeadPeice__WIkMK\",\"dataBricksWrapper\":\"dataBricks_dataBricksWrapper__AAWqZ\",\"brickHead\":\"dataBricks_brickHead__kaCy5\",\"oneBrick\":\"dataBricks_oneBrick__+exU+\",\"oneBrickPiece\":\"dataBricks_oneBrickPiece__F1g3Z\"};","import { useSelector } from \"react-redux\";\nimport { SupplerDataType, SupplierIdType } from \"../../../store/features/supplierSlice\";\nimport { RootState, useAppDispatch } from \"../../../store/store\";\nimport s from \"./dataBricks.module.css\";\nimport dbStyles from \"./../dashboard.module.css\";\n\nimport yes from './../../../public/icons/var_yes.png';\nimport no from './../../../public/icons/var_no.png';\nimport { PATHS } from \"../../outlet/outlet\";\nimport { useNavigate } from \"react-router-dom\";\nimport RiskInLine from \"../riskInLine\";\nimport { useTranslation } from \"react-i18next\";\nimport dayjs from \"dayjs\";\nimport { useEffect } from \"react\";\nimport { getCompaniesThunk } from \"../../../store/features/supplierThunks\";\nimport { FormatDateType } from \"../../../store/features/authSlice\";\n\n\n\nconst DataBricks = () => {\n    const navigate = useNavigate();\n    const dispatch = useAppDispatch();\n    const {t} = useTranslation();\n    // const pageNumber:number = useSelector((state:RootState) => state.supplier.pageOptions.currentPage);\n    \n    // // console.log('DataBricks pageNamber=', pageNumber);\n    \n\n    // useEffect(() => {\n    //     // dispatch(getCompaniesThunk({}));\n    // }, [pageNumber])\n\n    const companies:SupplerDataType[] = useSelector((state:RootState) => state.supplier.suppliers);\n    const userDateFormat:FormatDateType = useSelector((state: RootState) => state.auth.userSettings.date_format);\n    \n    const onSupplierClickHandler = (supplierId: SupplierIdType) => {\n        navigate(PATHS.supplierCard + \"/\" + String(supplierId));\n    }\n\n    return <div className={s.dataBricksWrapper}>\n\n        <div className={s.brickHead}>\n            <div className={s.brickHeadPeice}>\n                <label>{ t(\"table_name\") }</label>\n            </div>\n            <div className={s.brickHeadPeice}>\n                <label>{ t(\"table_creation_date\")}</label>\n            </div>\n            <div className={s.brickHeadPeice}>\n                <label>{ t(\"table_is_complite\") }</label>\n            </div>\n            <div className={s.brickHeadPeice}>\n                <label>{ t(\"table_risk\") }</label>\n            </div>\n        </div>\n\n        {\n            companies.map( (c:SupplerDataType, ind: number) => {\n                return <div \n                            className={s.oneBrick} \n                            key={c.supplierId}\n                            onClick={() => onSupplierClickHandler(c.supplierId)}\n                        >\n                    <div className={s.oneBrickPiece}>\n                        Номер строки {ind+1}, компания: {c.supplierName}\n                    </div>\n                    <div className={s.oneBrickPiece}>\n                        {c.creationDate && dayjs(c.creationDate).format(userDateFormat)}\n                    </div>\n                    <div className={s.oneBrickPiece}>\n                        {\n                            c.filledDate\n                                ? <img src={yes} className={dbStyles.icon_yes_no} alt=\"\"/>\n                                : <img src={no} className={dbStyles.icon_yes_no} alt=\"\"/>\n                        }\n                    </div>\n                    <div className={s.oneBrickPiece}>\n                        <RiskInLine risk={c.risk}/>\n                    </div>\n                </div>\n            })\n        }\n               \n        \n\n    </div>\n}\n\nexport default DataBricks;","import { useSelector } from \"react-redux\";\n\nimport starBlack from \"../../public/icons/icon_star_black.png\" //../../../  ../../public/icons/icon_star_black.png\";\nimport starGreen from \"../../public/icons/icon_star_green.png\";\nimport starRed from \"../../public/icons/icon_star_red.png\";\nimport starYellow from \"../../public/icons/icon_star_yellow.png\";\nimport { RiskViewType, RiskViewWORD } from \"../../store/features/authSlice\";\n\nimport { RiskType, RISK_HIGH, RISK_LOW, RISK_MEDIUM } from \"../../store/features/supplierSlice\";\nimport { RootState } from \"../../store/store\";\n\nimport dbStyles from './dashboard.module.css';\n\ntype RiskInLinePropsType = { risk: RiskType }\nconst RiskInLine = ({risk}: RiskInLinePropsType) => {\n    const riskView:RiskViewType = useSelector((state: RootState) => state.auth.userSettings.risk_format);\n    // const riskView:RiskViewType = useSelector((state: RootState) => state.supplier.settings.riskView);\n\n    let riskWord: string = \"\";\n    if (risk === RISK_LOW)\n        riskWord = \"Low\";\n    if (risk === RISK_MEDIUM)\n        riskWord = \"Medium\";\n    if (risk === RISK_HIGH)\n        riskWord = \"High\";\n\n    return <>\n         {\n            riskView === RiskViewWORD\n                ? risk !== undefined && risk !== null && <div\n                    className={\n                        risk === RISK_LOW\n                            ? dbStyles.risk + \" \" + dbStyles.risk_low\n                            : risk === RISK_MEDIUM\n                                ? dbStyles.risk + \" \" + dbStyles.risk_medium\n                                : dbStyles.risk + \" \" + dbStyles.risk_high\n                    }>\n                    { riskWord }\n                </div>\n                : risk === undefined || risk === null\n                    ? <img src={starBlack} className={dbStyles.star}/>\n                    : risk === RISK_LOW\n                        ? <img src={starGreen} className={dbStyles.star}/>\n                        : risk === RISK_MEDIUM\n                            ? <img src={starYellow} className={dbStyles.star}/>\n                            : <img src={starRed} className={dbStyles.star}/>\n                \n        }\n    </>\n}\n\nexport default RiskInLine;"],"names":["navigate","useNavigate","t","useAppDispatch","useTranslation","companies","useSelector","state","supplier","suppliers","userDateFormat","auth","userSettings","date_format","className","s","map","c","ind","onClick","supplierId","PATHS","String","supplierName","creationDate","dayjs","format","filledDate","src","yes","dbStyles","alt","no","risk","riskView","risk_format","riskWord","RISK_LOW","RISK_MEDIUM","RISK_HIGH","RiskViewWORD","undefined"],"sourceRoot":""}